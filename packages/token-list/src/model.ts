import type { ModelTypeAliases, EncodedManagedModel } from '@glazed/types'

import type { TokenList } from '../types/tokenList'

export type ModelTypes = ModelTypeAliases<{ TokenList: TokenList }, { tokenList: 'TokenList' }>

export const model: EncodedManagedModel = {
  schemas: {
    kjzl6cwe1jw149weh7ijg2ynif6vt9e11ko7s9majxvc4eryv37pd1m7jt6m5el: {
      alias: 'tokenList',
      commits: [
        {
          jws: {
            payload: 'AXESIKUdShEnf0v7q0OmWMfXJmdNPVGSvJ_vWc-tLgmvM3nX',
            signatures: [
              {
                signature:
                  'xMce2_9V4suUIhqOXBSvd3frgBRmBatOlqhTSN21pIOpnS0bPcHDXUtj9-wd-Xkcn9qhiHygJMjZGVtDQfTTAw',
                protected:
                  'eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa29lbllLejZNZ0pCVEhNUm1iQVpLSERMcW5ib0Z0WjdUM0hqN2IxUjF5SFc4I3o2TWtvZW5ZS3o2TWdKQlRITVJtYkFaS0hETHFuYm9GdFo3VDNIajdiMVIxeUhXOCJ9',
              },
            ],
            link: 'bafyreiffdvfbcj37jp52wq5gldd5ojthju6vdev4t7xvtt5nfye26m3z24',
          },
          linkedBlock:
            'omRkYXRhqGR0eXBlZm9iamVjdGV0aXRsZWpUb2tlbiBMaXN0ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2hyZXF1aXJlZIRkbmFtZWl0aW1lc3RhbXBndmVyc2lvbmZ0b2tlbnNqcHJvcGVydGllc6dkbmFtZaZkdHlwZWZzdHJpbmdncGF0dGVybmheW1x3IF0rJGhleGFtcGxlc4FtTXkgVG9rZW4gTGlzdGltYXhMZW5ndGgUaW1pbkxlbmd0aAFrZGVzY3JpcHRpb254GlRoZSBuYW1lIG9mIHRoZSB0b2tlbiBsaXN0ZHRhZ3OmZHR5cGVmb2JqZWN0aGV4YW1wbGVzgaFqc3RhYmxlY29pbqJkbmFtZWpTdGFibGVjb2lua2Rlc2NyaXB0aW9ueCpBIHRva2VuIHdpdGggdmFsdWUgcGVnZ2VkIHRvIGFub3RoZXIgYXNzZXRrZGVzY3JpcHRpb254OkEgbWFwcGluZyBvZiB0YWcgaWRlbnRpZmllcnMgdG8gdGhlaXIgbmFtZSBhbmQgZGVzY3JpcHRpb25tbWF4UHJvcGVydGllcxRtcHJvcGVydHlOYW1lc6FkJHJlZngbIy9kZWZpbml0aW9ucy9UYWdJZGVudGlmaWVydGFkZGl0aW9uYWxQcm9wZXJ0aWVzoWQkcmVmeBsjL2RlZmluaXRpb25zL1RhZ0RlZmluaXRpb25mdG9rZW5zpWR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmdyMvZGVmaW5pdGlvbnMvVG9rZW5JbmZvaG1heEl0ZW1zGScQaG1pbkl0ZW1zAWtkZXNjcmlwdGlvbngnVGhlIGxpc3Qgb2YgdG9rZW5zIGluY2x1ZGVkIGluIHRoZSBsaXN0Z2xvZ29VUkmkZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmloZXhhbXBsZXOBeDVpcGZzOi8vUW1YZnpLUnZqWnozdTVKUmdDNHY1bUdWYm05YWhyVWlCNERnekhCc25XYlRNTWtkZXNjcmlwdGlvbnhHQSBVUkkgZm9yIHRoZSBsb2dvIG9mIHRoZSB0b2tlbiBsaXN0OyBwcmVmZXIgU1ZHIG9yIFBORyBvZiBzaXplIDI1NngyNTZndmVyc2lvbqFkJHJlZnUjL2RlZmluaXRpb25zL1ZlcnNpb25oa2V5d29yZHOlZHR5cGVlYXJyYXllaXRlbXOmZHR5cGVmc3RyaW5nZ3BhdHRlcm5oXltcdyBdKyRoZXhhbXBsZXODaGNvbXBvdW5kZ2xlbmRpbmdvcGVyc29uYWwgdG9rZW5zaW1heExlbmd0aBRpbWluTGVuZ3RoAWtkZXNjcmlwdGlvbnguQSBrZXl3b3JkIHRvIGRlc2NyaWJlIHRoZSBjb250ZW50cyBvZiB0aGUgbGlzdGhtYXhJdGVtcxRrZGVzY3JpcHRpb254VktleXdvcmRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGxpc3Q7IG1heSBiZSB1c2VkIGluIGxpc3QgZGlzY292ZXJhYmlsaXR5a3VuaXF1ZUl0ZW1z9Wl0aW1lc3RhbXCjZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254XFRoZSB0aW1lc3RhbXAgb2YgdGhpcyBsaXN0IHZlcnNpb247IGkuZS4gd2hlbiB0aGlzIGltbXV0YWJsZSB2ZXJzaW9uIG9mIHRoZSBsaXN0IHdhcyBjcmVhdGVka2RlZmluaXRpb25zqmdWZXJzaW9upmR0eXBlZm9iamVjdGhleGFtcGxlc4GjZW1ham9yAWVtaW5vcgBlcGF0Y2gAaHJlcXVpcmVkg2VtYWpvcmVtaW5vcmVwYXRjaGpwcm9wZXJ0aWVzo2VtYWpvcqRkdHlwZWdpbnRlZ2VyZ21pbmltdW0AaGV4YW1wbGVzggECa2Rlc2NyaXB0aW9ueHhUaGUgbWFqb3IgdmVyc2lvbiBvZiB0aGUgbGlzdC4gTXVzdCBiZSBpbmNyZW1lbnRlZCB3aGVuIHRva2VucyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHRva2VuIGFkZHJlc3NlcyBhcmUgY2hhbmdlZC5lbWlub3KkZHR5cGVnaW50ZWdlcmdtaW5pbXVtAGhleGFtcGxlc4IAAWtkZXNjcmlwdGlvbnhVVGhlIG1pbm9yIHZlcnNpb24gb2YgdGhlIGxpc3QuIE11c3QgYmUgaW5jcmVtZW50ZWQgd2hlbiB0b2tlbnMgYXJlIGFkZGVkIHRvIHRoZSBsaXN0LmVwYXRjaKRkdHlwZWdpbnRlZ2VyZ21pbmltdW0AaGV4YW1wbGVzggABa2Rlc2NyaXB0aW9ueE9UaGUgcGF0Y2ggdmVyc2lvbiBvZiB0aGUgbGlzdC4gTXVzdCBiZSBpbmNyZW1lbnRlZCBmb3IgYW55IGNoYW5nZXMgdG8gdGhlIGxpc3Qua2Rlc2NyaXB0aW9ueDFUaGUgdmVyc2lvbiBvZiB0aGUgbGlzdCwgdXNlZCBpbiBjaGFuZ2UgZGV0ZWN0aW9udGFkZGl0aW9uYWxQcm9wZXJ0aWVz9GlUb2tlbkluZm+lZHR5cGVmb2JqZWN0aHJlcXVpcmVkhWdjaGFpbklkZ2FkZHJlc3NoZGVjaW1hbHNkbmFtZWZzeW1ib2xqcHJvcGVydGllc6hkbmFtZaZkdHlwZWZzdHJpbmdncGF0dGVybngfXlsgXHcuJytcLSUvw4Atw5bDmC3DtsO4LcO/Ol0rJGhleGFtcGxlc4FoVVNEIENvaW5pbWF4TGVuZ3RoGChpbWluTGVuZ3RoAWtkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgdG9rZW5kdGFnc6VkdHlwZWVhcnJheWVpdGVtc6FkJHJlZngbIy9kZWZpbml0aW9ucy9UYWdJZGVudGlmaWVyaGV4YW1wbGVzgmpzdGFibGVjb2luaGNvbXBvdW5kaG1heEl0ZW1zCmtkZXNjcmlwdGlvbnhZQW4gYXJyYXkgb2YgdGFnIGlkZW50aWZpZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9rZW47IHRhZ3MgYXJlIGRlZmluZWQgYXQgdGhlIGxpc3QgbGV2ZWxmc3ltYm9spmR0eXBlZnN0cmluZ2dwYXR0ZXJudV5bYS16QS1aMC05K1wtJS8kLl0rJGhleGFtcGxlc4FkVVNEQ2ltYXhMZW5ndGgUaW1pbkxlbmd0aAFrZGVzY3JpcHRpb254LlRoZSBzeW1ib2wgZm9yIHRoZSB0b2tlbjsgbXVzdCBiZSBhbHBoYW51bWVyaWNnYWRkcmVzc6RkdHlwZWZzdHJpbmdncGF0dGVybnNeMHhbYS1mQS1GMC05XXs0MH0kaGV4YW1wbGVzgXgqMHhBMGI4Njk5MWM2MjE4YjM2YzFkMTlENGEyZTlFYjBjRTM2MDZlQjQ4a2Rlc2NyaXB0aW9ueD5UaGUgY2hlY2tzdW1tZWQgYWRkcmVzcyBvZiB0aGUgdG9rZW4gb24gdGhlIHNwZWNpZmllZCBjaGFpbiBJRGdjaGFpbklkpGR0eXBlZ2ludGVnZXJnbWluaW11bQFoZXhhbXBsZXOCARgqa2Rlc2NyaXB0aW9ueEFUaGUgY2hhaW4gSUQgb2YgdGhlIEV0aGVyZXVtIG5ldHdvcmsgd2hlcmUgdGhpcyB0b2tlbiBpcyBkZXBsb3llZGdsb2dvVVJJpGR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpaGV4YW1wbGVzgXg1aXBmczovL1FtWGZ6S1J2alp6M3U1SlJnQzR2NW1HVmJtOWFoclVpQjREZ3pIQnNuV2JUTU1rZGVzY3JpcHRpb254jUEgVVJJIHRvIHRoZSB0b2tlbiBsb2dvIGFzc2V0OyBpZiBub3Qgc2V0LCBpbnRlcmZhY2Ugd2lsbCBhdHRlbXB0IHRvIGZpbmQgYSBsb2dvIGJhc2VkIG9uIHRoZSB0b2tlbiBhZGRyZXNzOyBzdWdnZXN0IFNWRyBvciBQTkcgb2Ygc2l6ZSA2NHg2NGhkZWNpbWFsc6VkdHlwZWdpbnRlZ2VyZ21heGltdW0Y/2dtaW5pbXVtAGhleGFtcGxlc4ESa2Rlc2NyaXB0aW9ueCxUaGUgbnVtYmVyIG9mIGRlY2ltYWxzIGZvciB0aGUgdG9rZW4gYmFsYW5jZWpleHRlbnNpb25zoWQkcmVmeBojL2RlZmluaXRpb25zL0V4dGVuc2lvbk1hcGtkZXNjcmlwdGlvbngrTWV0YWRhdGEgZm9yIGEgc2luZ2xlIHRva2VuIGluIGEgdG9rZW4gbGlzdHRhZGRpdGlvbmFsUHJvcGVydGllc/RsRXh0ZW5zaW9uTWFwpmR0eXBlZm9iamVjdGhleGFtcGxlc4KiZWNvbG9yZyMwMDAwMDBxaXNfdmVyaWZpZWRfYnlfbWX1oXgceC1icmlkZ2VkLWFkZHJlc3Nlcy1ieS1jaGFpbqFhMaJsdG9rZW5BZGRyZXNzeCoweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTBtYnJpZGdlQWRkcmVzc3gqMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwa2Rlc2NyaXB0aW9ueERBbiBvYmplY3QgY29udGFpbmluZyBhbnkgYXJiaXRyYXJ5IG9yIHZlbmRvci1zcGVjaWZpYyB0b2tlbiBtZXRhZGF0YW1tYXhQcm9wZXJ0aWVzCm1wcm9wZXJ0eU5hbWVzoWQkcmVmeCEjL2RlZmluaXRpb25zL0V4dGVuc2lvbklkZW50aWZpZXJ0YWRkaXRpb25hbFByb3BlcnRpZXOhZCRyZWZ4HCMvZGVmaW5pdGlvbnMvRXh0ZW5zaW9uVmFsdWVtVGFnRGVmaW5pdGlvbqZkdHlwZWZvYmplY3RoZXhhbXBsZXOBomRuYW1lalN0YWJsZWNvaW5rZGVzY3JpcHRpb254KkEgdG9rZW4gd2l0aCB2YWx1ZSBwZWdnZWQgdG8gYW5vdGhlciBhc3NldGhyZXF1aXJlZIJkbmFtZWtkZXNjcmlwdGlvbmpwcm9wZXJ0aWVzomRuYW1lpWR0eXBlZnN0cmluZ2dwYXR0ZXJuaF5bIFx3XSskaW1heExlbmd0aBRpbWluTGVuZ3RoAWtkZXNjcmlwdGlvbnNUaGUgbmFtZSBvZiB0aGUgdGFna2Rlc2NyaXB0aW9upWR0eXBlZnN0cmluZ2dwYXR0ZXJubF5bIFx3XC4sOl0rJGltYXhMZW5ndGgYyGltaW5MZW5ndGgBa2Rlc2NyaXB0aW9ueCZBIHVzZXItZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIHRhZ2tkZXNjcmlwdGlvbnhKRGVmaW5pdGlvbiBvZiBhIHRhZyB0aGF0IGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggYSB0b2tlbiB2aWEgaXRzIGlkZW50aWZpZXJ0YWRkaXRpb25hbFByb3BlcnRpZXP0bVRhZ0lkZW50aWZpZXKmZHR5cGVmc3RyaW5nZ3BhdHRlcm5nXltcd10rJGhleGFtcGxlc4JoY29tcG91bmRqc3RhYmxlY29pbmltYXhMZW5ndGgKaW1pbkxlbmd0aAFrZGVzY3JpcHRpb254HlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiBhIHRhZ25FeHRlbnNpb25WYWx1ZaFlYW55T2aCoWQkcmVmeCUjL2RlZmluaXRpb25zL0V4dGVuc2lvblByaW1pdGl2ZVZhbHVlpGR0eXBlZm9iamVjdG1tYXhQcm9wZXJ0aWVzCm1wcm9wZXJ0eU5hbWVzoWQkcmVmeCEjL2RlZmluaXRpb25zL0V4dGVuc2lvbklkZW50aWZpZXJ0YWRkaXRpb25hbFByb3BlcnRpZXOhZCRyZWZ4IiMvZGVmaW5pdGlvbnMvRXh0ZW5zaW9uVmFsdWVJbm5lcjBzRXh0ZW5zaW9uSWRlbnRpZmllcqZkdHlwZWZzdHJpbmdncGF0dGVybmdeW1x3XSskaGV4YW1wbGVzg2Vjb2xvcnJpc19mZWVfb25fdHJhbnNmZXJnYWxpYXNlc2ltYXhMZW5ndGgYKGltaW5MZW5ndGgBa2Rlc2NyaXB0aW9ueCZUaGUgbmFtZSBvZiBhIHRva2VuIGV4dGVuc2lvbiBwcm9wZXJ0eXRFeHRlbnNpb25WYWx1ZUlubmVyMKFlYW55T2aCoWQkcmVmeCUjL2RlZmluaXRpb25zL0V4dGVuc2lvblByaW1pdGl2ZVZhbHVlpGR0eXBlZm9iamVjdG1tYXhQcm9wZXJ0aWVzCm1wcm9wZXJ0eU5hbWVzoWQkcmVmeCEjL2RlZmluaXRpb25zL0V4dGVuc2lvbklkZW50aWZpZXJ0YWRkaXRpb25hbFByb3BlcnRpZXOhZCRyZWZ4IiMvZGVmaW5pdGlvbnMvRXh0ZW5zaW9uVmFsdWVJbm5lcjF0RXh0ZW5zaW9uVmFsdWVJbm5lcjGhZWFueU9mgaFkJHJlZnglIy9kZWZpbml0aW9ucy9FeHRlbnNpb25QcmltaXRpdmVWYWx1ZXdFeHRlbnNpb25QcmltaXRpdmVWYWx1ZaFlYW55T2aEpGR0eXBlZnN0cmluZ2hleGFtcGxlc4FmIzAwMDAwaW1heExlbmd0aBgqaW1pbkxlbmd0aAGiZHR5cGVnYm9vbGVhbmhleGFtcGxlc4H1omR0eXBlZm51bWJlcmhleGFtcGxlc4EPoWR0eXBlZG51bGxrZGVzY3JpcHRpb254QFNjaGVtYSBmb3IgbGlzdHMgb2YgdG9rZW5zIGNvbXBhdGlibGUgd2l0aCB0aGUgVW5pc3dhcCBJbnRlcmZhY2V0YWRkaXRpb25hbFByb3BlcnRpZXP0ZmhlYWRlcqJmdW5pcXVlcGFFMkxxdVNabTVtSGhPTU9rY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWtvZW5ZS3o2TWdKQlRITVJtYkFaS0hETHFuYm9GdFo3VDNIajdiMVIxeUhXOA==',
        },
      ],
      dependencies: {},
      version: 'k3y52l7qbv1fryeeeydfuad2f700y82rrf707d0ej1suu7d2vx2uscrhxovj1ifpc',
    },
  },
  definitions: {
    kjzl6cwe1jw146xgisjnwpogl2yy7ort80h5vfqinrsoj4w80x7zibsapkzk8ot: {
      alias: 'tokenList',
      commits: [
        {
          jws: {
            payload: 'AXESIPQnt3qm9jCScu_400QaRSUOsci20SCyW2FhRXy3Nx2p',
            signatures: [
              {
                signature:
                  '-hqdkCHZBFiVpJ26DAZzXRyM7xA0HUfMHu3DHUxPISv9uKp7B7xNjxOAvV-8cnCbqvY7L0uMZ4MhpU354swOAg',
                protected:
                  'eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa29lbllLejZNZ0pCVEhNUm1iQVpLSERMcW5ib0Z0WjdUM0hqN2IxUjF5SFc4I3o2TWtvZW5ZS3o2TWdKQlRITVJtYkFaS0hETHFuYm9GdFo3VDNIajdiMVIxeUhXOCJ9',
              },
            ],
            link: 'bafyreihue63xvjxwgcjhf37y2ncburjfb2y4rnwreczfwylbiv6lony5ve',
          },
          linkedBlock:
            'omRkYXRho2RuYW1laXRva2VuTGlzdGZzY2hlbWF4S2NlcmFtaWM6Ly9rM3k1Mmw3cWJ2MWZyeWVlZXlkZnVhZDJmNzAweTgycnJmNzA3ZDBlajFzdXU3ZDJ2eDJ1c2NyaHhvdmoxaWZwY2tkZXNjcmlwdGlvbngidG9rZW4gbGlzdCBjb21wYXRpYmxlIHdpdGggdW5pc3dhcGZoZWFkZXKjZnNjaGVtYXhLY2VyYW1pYzovL2szeTUybDdxYnYxZnJ5MWZwNHMwbndkYXJoMHZhaHVzYXJwcG9zZ2V2eTBwZW1peWt5bWQyb3JkNnN3dGhhcmN3ZnVuaXF1ZXA5NkNGV2g2THY4R1N5bkMya2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rb2VuWUt6Nk1nSkJUSE1SbWJBWktIRExxbmJvRnRaN1QzSGo3YjFSMXlIVzg=',
        },
      ],
      schema: 'kjzl6cwe1jw149weh7ijg2ynif6vt9e11ko7s9majxvc4eryv37pd1m7jt6m5el',
      version: 'k3y52l7qbv1frxt9xhmzu0mlxxx4jao5rsze1rjwkp1nyg2t52k8sibt85x8vxse8',
    },
  },
  tiles: {},
}
